// File: PWActivityFetchOnePage.cls
// Named Credential: callout:Pathwright_GraphQL
public with sharing class PWActivityFetchOnePage implements Queueable, Database.AllowsCallouts {
    private Integer first;
    public PWActivityFetchOnePage(Integer first) { this.first = (first != null && first > 0) ? first : 25; }

    public void execute(QueueableContext qc) {
        try {
            HttpRequest req = new HttpRequest();
            req.setEndpoint('callout:Pathwright_GraphQL');
            req.setMethod('POST');
            req.setHeader('Content-Type', 'application/json');

            String q =
            'query Query($first: Int!) {' + '\n' +
            '  activity(first: $first) {' + '\n' +
            '    pageInfo { startCursor endCursor hasNextPage }' + '\n' +
            '    edges {' + '\n' +
            '      node {' + '\n' +
            '        action_dtime' + '\n' +
            '        action' + '\n' +
            '        resource { name id }' + '\n' +
            '        group { id name }' + '\n' +
            '        registration {' + '\n' +
            '          id user_id path_id completion_state' + '\n' +
            '          registration_payment {' + '\n' +
            '            payment { amount }' + '\n' +
            '            couponRedemption { coupon { code } }' + '\n' +
            '          }' + '\n' +
            '        }' + '\n' +
            '        step { url name item_needs_grading }' + '\n' +
            '        user { email full_name membership { role } }' + '\n' +
            '        id' + '\n' +
            '      }' + '\n' +
            '    }' + '\n' +
            '  }' + '\n' +
            '}';

            req.setBody(JSON.serialize(new Map<String,Object>{
                'query' => q,
                'variables' => new Map<String,Object>{ 'first' => first }
            }));

            HttpResponse res = new Http().send(req);
            System.debug(LoggingLevel.INFO, 'HTTP ' + res.getStatusCode());
            if (res.getStatusCode() != 200) { System.debug(res.getBody()); return; }

            Map<String,Object> body = (Map<String,Object>) JSON.deserializeUntyped(res.getBody());
            Map<String,Object> data = (Map<String,Object>) body.get('data');
            Map<String,Object> act  = (data == null) ? null : (Map<String,Object>) data.get('activity');
            List<Object> edges      = (act == null) ? new List<Object>() : (List<Object>) act.get('edges');
            Map<String,Object> pi   = (act == null) ? null : (Map<String,Object>) act.get('pageInfo');
            System.debug(LoggingLevel.INFO,
                'Fetched ' + edges.size() +
                ' rows | hasNext=' + String.valueOf(pi == null ? null : pi.get('hasNextPage')));

            List<PW_Activity_Data__c> rows = new List<PW_Activity_Data__c>();
            for (Object eo : edges) {
                Map<String,Object> node = (Map<String,Object>) ((Map<String,Object>) eo).get('node');
                if (node == null) continue;

                String actionId = asString(node.get('id'));
                if (String.isBlank(actionId)) continue;

                PW_Activity_Data__c r = new PW_Activity_Data__c();
                r.put('PW_Action_ID__c', actionId);
                r.Name = actionId;
                r.Action_Type__c = asString(node.get('action'));
                r.Action_Time__c = toDatetimeUtc(asString(node.get('action_dtime')));

                Map<String,Object> resource = (Map<String,Object>) node.get('resource');
                if (resource != null) r.Resource_Name__c = asString(resource.get('name'));

                Map<String,Object> grp = (Map<String,Object>) node.get('group');
                if (grp != null) {
                    r.PW_Cohort_ID__c = asString(grp.get('id'));
                    r.Cohort_Name__c  = asString(grp.get('name'));
                }

                Map<String,Object> reg = (Map<String,Object>) node.get('registration');
                if (reg != null) {
                    Map<String,Object> regPay = (Map<String,Object>) reg.get('registration_payment');
                    if (regPay != null) {
                        Map<String,Object> cr = (Map<String,Object>) regPay.get('couponRedemption');
                        if (cr != null) {
                            Map<String,Object> coupon = (Map<String,Object>) cr.get('coupon');
                            if (coupon != null) r.Coupon_Code__c = asString(coupon.get('code'));
                        }
                    }
                }

                Map<String,Object> step = (Map<String,Object>) node.get('step');
                if (step != null) {
                    r.Step_Name__c = asString(step.get('name'));
                    r.Step_Url__c = asString(step.get('url'));
                    r.Requires_Grading__c = asBool(step.get('item_needs_grading'));
                }

                Map<String,Object> usr = (Map<String,Object>) node.get('user');
                if (usr != null) r.Email__c = asString(usr.get('email'));

                rows.add(r);
            }

            if (!rows.isEmpty()) {
                Database.UpsertResult[] rs = Database.upsert(
                    rows,
                    Schema.SObjectType.PW_Activity_Data__c.fields.getMap().get('PW_Action_ID__c'),
                    false
                );
                Integer created = 0, updated = 0, failed = 0;
                for (Database.UpsertResult ur : rs) {
                    if (ur.isSuccess()) {
                        if (ur.isCreated()) created++; else updated++;
                    } else {
                        failed++;
                        for (Database.Error e : ur.getErrors()) {
                            System.debug(LoggingLevel.ERROR, 'Upsert error: ' + e.getStatusCode() + ' ' + e.getMessage());
                        }
                    }
                }
                System.debug(LoggingLevel.INFO, 'Upsert summary: created=' + created + ', updated=' + updated + ', failed=' + failed);
            }
        } catch (Exception e) {
            System.debug(LoggingLevel.ERROR, 'Callout failed: ' + e.getMessage());
        }
    }

    private static Datetime toDatetimeUtc(String iso) {
        if (String.isBlank(iso)) return null;
        try { return Datetime.valueOfGmt(iso.replace('T',' ').replace('Z','')); } catch (Exception e) { return null; }
    }
    private static String asString(Object o) { return o == null ? null : String.valueOf(o); }
    private static Boolean asBool(Object o) { return o == null ? false : Boolean.valueOf(String.valueOf(o)); }

    public class FlowInput {
        @InvocableVariable public Integer pageSize;
    }
    public class FlowOutput {
        @InvocableVariable public String jobId;
        @InvocableVariable public String message;
    }

    @InvocableMethod(label='Run Apex to Sync Activity Data from PW' description='Enqueues PWActivityFetchOnePage with an optional page size (default 25).')
    public static List<FlowOutput> runFromFlow(List<FlowInput> inputs) {
        Integer first = 25;
        if (inputs != null && !inputs.isEmpty() && inputs[0] != null
            && inputs[0].pageSize != null && inputs[0].pageSize > 0) {
            first = inputs[0].pageSize;
        }

        FlowOutput o = new FlowOutput();
        try {
            o.jobId = (String) System.enqueueJob(new PWActivityFetchOnePage(first));
            o.message = 'Enqueued with pageSize=' + first;
        } catch (Exception e) {
            o.message = 'Failed to enqueue: ' + e.getMessage();
        }
        return new List<FlowOutput>{ o };
    }
}
