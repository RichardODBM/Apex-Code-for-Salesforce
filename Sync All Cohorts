// File: PWCohortsFetchUpdates.cls
// Named Credential: callout:Pathwright_GraphQL
public with sharing class PWCohortsFetchUpdates implements Queueable, Database.AllowsCallouts {
    // ===== Properties =====
    private Integer first;
    private String actionType; // optional filter from Flow

    // ===== Constructor =====
    public PWCohortsFetchUpdates(Integer first, String actionType) {
        this.first = (first != null && first > 0) ? first : 50;
        this.actionType = actionType;
    }

    // ===== Queueable Entry Point =====
    public void execute(QueueableContext qc) {
        try {
            // --- Build HTTP Request ---
            HttpRequest req = new HttpRequest();
            req.setEndpoint('callout:Pathwright_GraphQL');
            req.setMethod('POST');
            req.setHeader('Content-Type', 'application/json');

            // --- GraphQL Query (replaced with new version) ---
            String q = 'query Query($first: Int!, $actionType: ActionTypeFilter) { activity(first: $first, action_type: $actionType) { edges { node { action_type action_dtime group { id name created price description status registration_ends registration_starts source_cohort_id access_ends access_starts invite_urls { student moderator teacher observer } resource { name id } } } } } }';
            
            // --- GraphQL Variables ---
            Map<String, Object> vars = new Map<String, Object>{ 'first' => first };
            if (String.isNotBlank(actionType)) {
                vars.put('actionType', new Map<String, Object>{ 'in' => actionType });
            } else {
                vars.put('actionType', null);
            }

            req.setBody(JSON.serialize(new Map<String,Object>{
                'query' => q,
                'variables' => vars
            }));

            // --- Send Request ---
            HttpResponse res = new Http().send(req);
            System.debug(LoggingLevel.INFO, 'HTTP ' + res.getStatusCode());
            if (res.getStatusCode() != 200) { 
                System.debug(res.getBody()); 
                return; 
            }

            // --- Parse Response ---
            Map<String,Object> body = (Map<String,Object>) JSON.deserializeUntyped(res.getBody());
            Map<String,Object> data = (Map<String,Object>) body.get('data');
            Map<String,Object> act  = (data == null) ? null : (Map<String,Object>) data.get('activity');
            List<Object> edges      = (act == null) ? new List<Object>() : (List<Object>) act.get('edges');
            System.debug(LoggingLevel.INFO, 'Fetched ' + edges.size() + ' rows | actionType=' + String.valueOf(actionType));

            // --- Transform into SObjects ---
            List<cohort__c> rows = new List<cohort__c>();
            System.debug('Starting transformation of ' + edges.size() + ' edges');

            for (Object eo : edges) {
                System.debug('Processing edge: ' + JSON.serialize(eo));
                
                Map<String,Object> edge = (Map<String,Object>) eo;
                Map<String,Object> node = (Map<String,Object>) edge.get('node');
                System.debug('Extracted node: ' + JSON.serialize(node));
                
                if (node == null) {
                    System.debug('Node is null, skipping');
                    continue;
                }

                Map<String,Object> grp = (Map<String,Object>) node.get('group');
                System.debug('Extracted group: ' + JSON.serialize(grp));
                
                if (grp != null) {
                    String cohortId = asString(grp.get('id'));
                    String cohortName = asString(grp.get('name'));
                    System.debug('Extracted values - ID: ' + cohortId + ', Name: ' + cohortName);
                    
                    cohort__c r = new cohort__c();
                    r.pw_cohort_id__c = cohortId;
                    r.cohort_name__c = cohortName;
                    
                    System.debug('Created record: ' + JSON.serialize(r));
                    rows.add(r);
                } else {
                    System.debug('Group is null, skipping');
                }
            }

            System.debug('Final rows list size: ' + rows.size());
            System.debug('Final rows content: ' + JSON.serialize(rows));

            // --- Upsert to Salesforce ---
            if (!rows.isEmpty()) {
                System.debug('About to upsert ' + rows.size() + ' records');
                
                // Use explicit external ID field
                Database.UpsertResult[] rs = Database.upsert(rows, cohort__c.pw_cohort_id__c, false);
                
                Integer created = 0, updated = 0, failed = 0;
                for (Database.UpsertResult ur : rs) {
                    if (ur.isSuccess()) {
                        if (ur.isCreated()) { created++; } else { updated++; }
                    } else {
                        failed++;
                        System.debug(LoggingLevel.ERROR, 'Upsert failed for record: ' + JSON.serialize(ur));
                        for (Database.Error e : ur.getErrors()) {
                            System.debug(LoggingLevel.ERROR, 'Upsert error: ' + e.getStatusCode() + ' - ' + e.getMessage());
                            System.debug(LoggingLevel.ERROR, 'Affected fields: ' + e.getFields());
                        }
                    }
                }
                System.debug(LoggingLevel.INFO, 'Upsert summary: created=' + created + ', updated=' + updated + ', failed=' + failed);
            } else {
                System.debug('No rows to upsert - rows list is empty');
            }
            
        } catch (Exception e) {
            System.debug(LoggingLevel.ERROR, 'Callout failed: ' + e.getMessage());
        }
    }

    // ===== Helper Methods =====
    private static Datetime toDatetimeUtc(String iso) {
        if (String.isBlank(iso)) return null;
        try { 
            return Datetime.valueOfGmt(iso.replace('T',' ').replace('Z','')); 
        } catch (Exception e) { 
            return null; 
        }
    }
    
    private static String asString(Object o) { 
        return o == null ? null : String.valueOf(o); 
    }
    
    private static Boolean asBool(Object o) { 
        return o == null ? false : Boolean.valueOf(String.valueOf(o)); 
    }

    // ===== Flow Input/Output Classes =====
    public class FlowInput {
        @InvocableVariable public Integer pageSize;
        @InvocableVariable public String actionType; // new optional filter, e.g. 'create_group'
    }
    
    public class FlowOutput {
        @InvocableVariable public String jobId;
        @InvocableVariable public String message;
    }

    // ===== Flow Entry Point =====
    @InvocableMethod(label='Fetch cohort activity updates from PW' description='Enqueues PWCohortsFetchUpdates with optional filters (page size, actionType).')
    public static List<FlowOutput> runFromFlow(List<FlowInput> inputs) {
        Integer first = 50;
        String actionTypeVar = null;
        if (inputs != null && !inputs.isEmpty() && inputs[0] != null) {
            if (inputs[0].pageSize != null && inputs[0].pageSize > 0) {
                first = inputs[0].pageSize;
            }
            if (String.isNotBlank(inputs[0].actionType)) {
                actionTypeVar = inputs[0].actionType;
            }
        }

        FlowOutput o = new FlowOutput();
        try {
            o.jobId = (String) System.enqueueJob(new PWCohortsFetchUpdates(first, actionTypeVar));
            o.message = 'Enqueued PWCohortsFetchUpdates with pageSize=' + first +
                        (String.isNotBlank(actionTypeVar) ? ', actionType=' + actionTypeVar : '');
        } catch (Exception e) {
            o.message = 'Failed to enqueue PWCohortsFetchUpdates: ' + e.getMessage();
        }
        return new List<FlowOutput>{ o };
    }
}
